---
README.md
---
# GeoRocksUNAM

GeoRocksUNAM is an Android application designed to explore and learn about various types of rocks. The app provides detailed information about rocks, including physical characteristics, chemical properties, locations, and multimedia enhancements like videos and audio effects to make the learning experience engaging.

---

## Features

- **Rock List**: Browse a comprehensive collection of rocks retrieved from a REST API.
- **Detailed Rock Information**:
  - Type, color, hardness, chemical formula, and magnetic properties.
  - Locations where the rock can be found.
- **Video Playback**: Learn more about each rock through embedded videos in the detail screen.
- **Audio Effects**: Interactive audio effects for a better user experience.
- **Google Maps Integration**: View locations where specific rocks are commonly found.
- **Firebase Authentication**: Secure login and registration for users.
- **Logout Functionality**: Easy session managemZent for user security.
- **User-Friendly Interface**: Thoughtful and intuitive design for seamless navigation.

---

## Technologies Used

- **Kotlin**: Primary programming language for app development.
- **Retrofit**: API consumption and data parsing.
- **Glide**: Efficient image loading and caching.
- **Firebase Authentication**: User management.
- **Google Maps SDK**: Displaying rock locations on a map.
- **AndroidX Libraries**: Modern libraries for backward compatibility and enhanced features.
- **Material Design Components**: For an aesthetically pleasing UI/UX.
- **MediaPlayer**: Audio playback for user interactions.

---

## Getting Started

### Prerequisites

- Android Studio Flamingo or higher.
- Android device or emulator running Android 8.0 (Oreo) or above.
- A stable internet connection to fetch data and stream videos.

---

### Installation

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/EnigmaK9/GeoRocksUNAM.git
   ```

2. **Open in Android Studio**:
   - Open Android Studio.
   - Select **"Open an existing project"**.
   - Navigate to the cloned repository folder and open it.

3. **Sync Dependencies**:
   - Gradle will automatically download required dependencies. Ensure a stable internet connection.

4. **Run the App**:
   - Connect your Android device with USB debugging enabled or start an emulator.
   - Click the **Run** button in Android Studio.
   - Select your device or emulator to install and launch the app.

---

## How to Use

1. **Login**:
   - Use your registered email and password or create a new account.

2. **Explore Rocks**:
   - Scroll through the rock list to explore various rocks.

3. **Detailed Information**:
   - Tap on a rock to view its details.
   - Watch embedded videos to gain insights.
   - Use Google Maps to locate its origin.

4. **Logout**:
   - Tap the logout button in the app toolbar to securely end your session.

---

## ExampleVideo
![GeoRocks](https://github.com/EnigmaK9/GeoRocksUNAM/blob/main/georocks.gif?raw=true)


---

## Contributing

We welcome contributions! To contribute:

1. Fork the repository.
2. Create a new feature branch:
   ```bash
   git checkout -b feature/YourFeatureName
   ```
3. Commit your changes:
   ```bash
   git commit -m "Add YourFeatureName"
   ```
4. Push your branch:
   ```bash
   git push origin feature/YourFeatureName
   ```
5. Open a pull request to merge into the main branch.

---

## License

This project is licensed under the MIT License. See the `LICENSE` file for more information.

---

## Contact

For questions or support, feel free to contact us at **enigmak9@protonmail.com**.
---
# GeoRocksUNAM

GeoRocksUNAM is an Android application designed to explore and learn about various types of rocks. The app provides detailed information about rocks, including physical characteristics, chemical properties, locations, and multimedia enhancements like videos and audio effects to make the learning experience engaging.

---

## Features

- **Rock List**: Browse a comprehensive collection of rocks retrieved from a REST API.
- **Detailed Rock Information**:
  - Type, color, hardness, chemical formula, and magnetic properties.
  - Locations where the rock can be found.
- **Video Playback**: Learn more about each rock through embedded videos in the detail screen.
- **Audio Effects**: Interactive audio effects for a better user experience.
- **Google Maps Integration**: View locations where specific rocks are commonly found.
- **Firebase Authentication**: Secure login and registration for users.
- **Logout Functionality**: Easy session management for user security.
- **User-Friendly Interface**: Thoughtful and intuitive design for seamless navigation.

---

## Technologies Used

- **Kotlin**: Primary programming language for app development.
- **Retrofit**: API consumption and data parsing.
- **Glide**: Efficient image loading and caching.
- **Firebase Authentication**: User management.
- **Google Maps SDK**: Displaying rock locations on a map.
- **AndroidX Libraries**: Modern libraries for backward compatibility and enhanced features.
- **Material Design Components**: For an aesthetically pleasing UI/UX.
- **MediaPlayer**: Audio playback for user interactions.

---

## Getting Started

### Prerequisites

- Android Studio Flamingo or higher.
- Android device or emulator running Android 8.0 (Oreo) or above.
- A stable internet connection to fetch data and stream videos.

---

### Installation

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/EnigmaK9/GeoRocksUNAM.git
   ```

2. **Open in Android Studio**:
   - Open Android Studio.
   - Select **"Open an existing project"**.
   - Navigate to the cloned repository folder and open it.

3. **Sync Dependencies**:
   - Gradle will automatically download required dependencies. Ensure a stable internet connection.

4. **Run the App**:
   - Connect your Android device with USB debugging enabled or start an emulator.
   - Click the **Run** button in Android Studio.
   - Select your device or emulator to install and launch the app.

---

## How to Use

1. **Login**:
   - Use your registered email and password or create a new account.

2. **Explore Rocks**:
   - Scroll through the rock list to explore various rocks.

3. **Detailed Information**:
   - Tap on a rock to view its details.
   - Watch embedded videos to gain insights.
   - Use Google Maps to locate its origin.

4. **Logout**:
   - Tap the logout button in the app toolbar to securely end your session.

---

## ExampleVideo
![GeoRocks](https://github.com/EnigmaK9/GeoRocksUNAM/blob/main/georocks.gif?raw=true)


---

## Contributing

We welcome contributions! To contribute:

1. Fork the repository.
2. Create a new feature branch:
   ```bash
   git checkout -b feature/YourFeatureName
   ```
3. Commit your changes:
   ```bash
   git commit -m "Add YourFeatureName"
   ```
4. Push your branch:
   ```bash
   git push origin feature/YourFeatureName
   ```
5. Open a pull request to merge into the main branch.

---

## License

This project is licensed under the MIT License. See the `LICENSE` file for more information.

---

## Contact

For questions or support, feel free to contact us at **enigmak9@protonmail.com**.

---
app/src/main/AndroidManifest.xml
---
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Necessary permissions -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />

    <application
        android:name=".application.GeoRocksApp"
        android:allowBackup="true"
        android:fullBackupContent="@xml/backup_rules"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:usesCleartextTraffic="false"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.GeoRocks"
        tools:targetApi="31">

        <!-- Meta-data  Google Maps API Key -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />

        <!-- SplashActivity as Home Screen -->
        <activity
            android:name=".ui.SplashActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Application Activities -->
        <activity
            android:name=".ui.MainActivity"
            android:exported="true" />

        <activity
            android:name=".ui.activities.RockDetailActivity"
            android:exported="true" />

        <activity
            android:name=".ui.activities.LoginActivity"
            android:exported="true" />

        <activity
            android:name=".ui.activities.ResetPasswordActivity" />

        <activity
            android:name=".ui.activities.RegisterActivity" />
    </application>

</manifest>
---
app/src/main/java/com/enigma/georocks/data/db/RockDao.kt
---
package com.enigma.georocks.data.db

interface RockDao {
}
---
app/src/main/java/com/enigma/georocks/data/db/model/RockEntity.kt
---
package com.enigma.georocks.data.db.model

class RockEntity {
}
---
app/src/main/java/com/enigma/georocks/data/remote/RetrofitHelper.kt
---
package com.enigma.georocks.data.remote

import com.enigma.georocks.utils.Constants
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class RetrofitHelper {
    fun getRetrofit(): Retrofit {

        val interceptor = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY // Log detail level
        }

        val client = OkHttpClient.Builder().apply {
            addInterceptor(interceptor)
        }.build()

        return Retrofit.Builder()
            .baseUrl(Constants.BASE_URL) // correct base URL
            .client(client)
            .addConverterFactory(GsonConverterFactory.create()) // Converter for JSON
            .build()
    }
}

---
app/src/main/java/com/enigma/georocks/data/remote/RocksApi.kt
---
package com.enigma.georocks.data.remote

import com.enigma.georocks.data.remote.model.RockDetailDto
import com.enigma.georocks.data.remote.model.RockDto
import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.Path

interface RocksApi {

    // Endpoint to get the list of rocks
    @GET("rocks/rock_list")
    fun getRocksApiary(): Call<MutableList<RockDto>>

    // Endpoint to get the details of a specific rock
    @GET("rocks/rock_detail/{id}")
    fun getRockDetailApiary(
        @Path("id") id: String
    ): Call<RockDetailDto>
}
---
georocks/data/remote/model/RockDetailDto.kt
---
package com.enigma.georocks.data.remote.model

import com.google.gson.annotations.SerializedName

data class RockDetailDto(
    @SerializedName("title")
    var title: String? = null,

    @SerializedName("image")
    var image: String? = null,

    @SerializedName("video")
    var video: String? = null,

    @SerializedName("long_desc")
    var longDesc: String? = null,

    @SerializedName("a_member_of")
    var aMemberOf: String? = null,

    @SerializedName("also_known_as")
    var alsoKnownAs: List<String>? = null,

    @SerializedName("formula")
    var formula: String? = null,

    @SerializedName("hardness")
    var hardness: Int? = null,

    @SerializedName("color")
    var color: String? = null,

    @SerializedName("magnetic")
    var magnetic: Boolean? = null,

    @SerializedName("health_risks")
    var healthRisks: String? = null,

    @SerializedName("latitude")
    var latitude: Double? = null,

    @SerializedName("longitude")
    var longitude: Double? = null,

    @SerializedName("images")
    var images: List<String>? = null,

    @SerializedName("localities")
    var localities: List<String>? = null,

    @SerializedName("frequently_asked_questions")
    var frequentlyAskedQuestions: List<String>? = null,

    @SerializedName("physical_properties")
    var physicalProperties: PhysicalProperties? = null,

    @SerializedName("chemical_properties")
    var chemicalProperties: ChemicalProperties? = null
) {
    data class PhysicalProperties(
        @SerializedName("pp_crystal_system")
        var ppCrystalSystem: String? = null,

        @SerializedName("pp_colors")
        var ppColors: List<String>? = null,

        @SerializedName("pp_luster")
        var ppLuster: String? = null,

        @SerializedName("pp_diaphaneity")
        var ppDiaphaneity: String? = null,

        @SerializedName("pp_magnetic")
        var ppMagnetic: Boolean? = null,

        @SerializedName("pp_streak")
        var ppStreak: String? = null,

        @SerializedName("pp_hardness")
        var ppHardness: Int? = null,

        @SerializedName("pp_tenacity")
        var ppTenacity: String? = null,

        @SerializedName("pp_cleavage")
        var ppCleavage: String? = null,

        @SerializedName("pp_fracture")
        var ppFracture: String? = null,

        @SerializedName("pp_density")
        var ppDensity: String? = null
    )

    data class ChemicalProperties(
        @SerializedName("cp_chemical_classification")
        var cpChemicalClassification: String? = null,

        @SerializedName("cp_formula")
        var cpFormula: String? = null,

        @SerializedName("cp_elements_listed")
        var cpElementsListed: List<String>? = null,

        @SerializedName("cp_common_impurities")
        var cpCommonImpurities: List<String>? = null
    )
}
---
/georocks/data/remote/model/RockDto.kt
---

package com.enigma.georocks.data.remote.model
import com.google.gson.annotations.SerializedName

data class RockDto(
    @SerializedName("id") var id: String,
    @SerializedName("thumbnail") var thumbnail: String?,
    @SerializedName("title") var title: String
)

---
app/src/main/java/com/enigma/georocks/ui/MainActivity.kt
---
package com.enigma.georocks.ui

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import androidx.appcompat.app.AppCompatActivity
import com.enigma.georocks.R
import com.enigma.georocks.data.RockRepository
import com.enigma.georocks.data.remote.RetrofitHelper
import com.enigma.georocks.data.remote.model.RockDetailDto
import com.enigma.georocks.databinding.ActivityMainBinding
import com.enigma.georocks.ui.activities.LoginActivity
import com.enigma.georocks.ui.fragments.RocksListFragment
import com.google.firebase.auth.FirebaseAuth
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var repository: RockRepository

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val retrofit = RetrofitHelper().getRetrofit()
        repository = RockRepository(retrofit)

        if (savedInstanceState == null) {
            supportFragmentManager.beginTransaction()
                .replace(R.id.fragment_container, RocksListFragment())
                .commit()
        }

        checkRockDetails()  // Verificar detalles de las rocas
    }

    private fun checkRockDetails() {
        val rockIds = listOf("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")

        for (rockId in rockIds) {
            val call = repository.getRockDetail(rockId)  // Cambiado a getRockDetail para coincidir con el método en RockRepository
            call.enqueue(object : Callback<RockDetailDto> {
                override fun onResponse(call: Call<RockDetailDto>, response: Response<RockDetailDto>) {
                    if (response.isSuccessful) {
                        val rockDetail = response.body()
                        // Acceder correctamente a aMemberOf y color
                        Log.d("API", "Rock ID: $rockId, a_member_of: ${rockDetail?.aMemberOf}, color: ${rockDetail?.color}")
                    } else {
                        Log.d("API", "Error retrieving details for Rock ID: $rockId")
                    }
                }

                override fun onFailure(call: Call<RockDetailDto>, t: Throwable) {
                    Log.e("API", "Error retrieving details for Rock ID: $rockId, message: ${t.message}", t)
                }
            })
        }
    }
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_logout -> {
                FirebaseAuth.getInstance().signOut()
                val intent = Intent(this, LoginActivity::class.java)
                startActivity(intent)
                finish()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

}
---
app/src/main/java/com/enigma/georocks/ui/SplashActivity.kt
---
package com.enigma.georocks.ui

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.enigma.georocks.databinding.ActivitySplashBinding
import com.enigma.georocks.ui.activities.LoginActivity
import com.google.firebase.auth.FirebaseAuth

class SplashActivity : AppCompatActivity() {

    private lateinit var binding: ActivitySplashBinding
    private lateinit var auth: FirebaseAuth

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivitySplashBinding.inflate(layoutInflater)
        setContentView(binding.root)

        auth = FirebaseAuth.getInstance()

        binding.root.postDelayed({
            val currentUser = auth.currentUser
            if (currentUser != null) {
                // Authenticated user
                startActivity(Intent(this, MainActivity::class.java))
            } else {
                // Unauthenticated user
                startActivity(Intent(this, LoginActivity::class.java))
            }
            finish()
        }, 2000)
    }
}
---
app/src/main/java/com/enigma/georocks/ui/activities/LoginActivity.kt
---
package com.enigma.georocks.ui.activities

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.enigma.georocks.databinding.ActivityLoginBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException
import com.google.firebase.auth.FirebaseAuthInvalidUserException
import com.google.firebase.auth.FirebaseAuthUserCollisionException
import com.enigma.georocks.ui.MainActivity

class LoginActivity : AppCompatActivity() {

    // ViewBinding and FirebaseAuth
    private lateinit var binding: ActivityLoginBinding
    private lateinit var auth: FirebaseAuth

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize ViewBinding
        binding = ActivityLoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Initialize FirebaseAuth
        auth = FirebaseAuth.getInstance()

        // Set up click listeners
        setupListeners()
    }

    /**
     * Sets up click listeners for buttons and clickable elements
     */
    private fun setupListeners() {
        // Login button
        binding.btnLogin.setOnClickListener {
            val email = binding.etEmail.text.toString().trim()
            val password = binding.etPassword.text.toString()

            if (email.isNotEmpty() && password.isNotEmpty()) {
                login(email, password)
            } else {
                showToast("Please enter email and password")
            }
        }

        // "Forgot Password?" text
        binding.tvForgotPassword.setOnClickListener {
            navigateToResetPassword()
        }

        // "Create an account" text
        binding.tvRegister.setOnClickListener {
            navigateToRegister()
        }

        // Google Sign-In button (placeholder)
        binding.btnGoogleSignIn.setOnClickListener {
            showToast("Google Sign-In is not implemented yet")
        }
    }

    /**
     * Logs in the user using Firebase Authentication
     * @param email User's email address
     * @param password User's password
     */
    private fun login(email: String, password: String) {
        auth.signInWithEmailAndPassword(email, password)
            .addOnCompleteListener(this) { task ->
                if (task.isSuccessful) {
                    // Login successful
                    navigateToMainActivity()
                } else {
                    // Login failed
                    handleLoginError(task.exception)
                }
            }
    }

    /**
     * Handles login errors
     * @param exception FirebaseAuth exception
     */
    private fun handleLoginError(exception: Exception?) {
        when (exception) {
            is FirebaseAuthInvalidUserException -> showToast("User not registered")
            is FirebaseAuthInvalidCredentialsException -> showToast("Invalid credentials")
            is FirebaseAuthUserCollisionException -> showToast("This user is already registered")
            else -> {
                Log.e("LoginActivity", "Authentication error", exception)
                showToast("Unknown error: ${exception?.message}")
            }
        }
    }

    /**
     * Navigates to the main activity after a successful login
     */
    private fun navigateToMainActivity() {
        val intent = Intent(this, MainActivity::class.java)
        startActivity(intent)
        finish() // Closes the login activity to prevent going back
    }

    /**
     * Navigates to the reset password activity
     */
    private fun navigateToResetPassword() {
        val intent = Intent(this, ResetPasswordActivity::class.java)
        startActivity(intent)
    }

    /**
     * Navigates to the register activity
     */
    private fun navigateToRegister() {
        val intent = Intent(this, RegisterActivity::class.java)
        startActivity(intent)
    }

    /**
     * Displays a Toast message on the screen
     * @param message Message to display
     */
    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}
---
app/src/main/java/com/enigma/georocks/ui/activities/RegisterActivity.kt
---
package com.enigma.georocks.ui.activities

import android.content.Intent
import android.os.Bundle
import android.view.MenuItem
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.enigma.georocks.R
import com.enigma.georocks.databinding.ActivityRegisterBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException
import com.google.firebase.auth.FirebaseAuthUserCollisionException
import com.google.firebase.auth.FirebaseAuthWeakPasswordException
import com.google.android.material.snackbar.Snackbar

class RegisterActivity : AppCompatActivity() {

    // Instance of View Binding
    private lateinit var binding: ActivityRegisterBinding

    // Instance of FirebaseAuth
    private lateinit var auth: FirebaseAuth

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Inflate the layout using View Binding
        binding = ActivityRegisterBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Configure the Toolbar
        setSupportActionBar(binding.toolbarRegister)
        supportActionBar?.setDisplayHomeAsUpEnabled(true) // Show back button

        // Initialize FirebaseAuth
        auth = FirebaseAuth.getInstance()

        // Handle the click on the register button
        binding.btnRegister.setOnClickListener {
            val email = binding.etEmailRegister.text.toString().trim()
            val password = binding.etPasswordRegister.text.toString()

            // Basic validations
            if (email.isNotEmpty() && password.isNotEmpty()) {
                if (isValidEmail(email)) {
                    if (isValidPassword(password)) {
                        registerUser(email, password)
                    } else {
                        Toast.makeText(
                            this,
                            getString(R.string.password_too_short),
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                } else {
                    Toast.makeText(
                        this,
                        getString(R.string.invalid_email),
                        Toast.LENGTH_SHORT
                    ).show()
                }
            } else {
                Toast.makeText(
                    this,
                    getString(R.string.complete_all_fields),
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }

    // Handle the click on the back button in the Toolbar
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_logout -> {
                val intent = Intent(this, RegisterActivity::class.java)
                startActivity(intent)
                true
            }
            android.R.id.home -> {
                finish()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }


    // Function to register the user in Firebase
    private fun registerUser(email: String, password: String) {
        // Show ProgressBar and disable the register button
        binding.progressBarRegister.visibility = View.VISIBLE
        binding.btnRegister.isEnabled = false

        // Create user with email and password
        auth.createUserWithEmailAndPassword(email, password)
            .addOnCompleteListener { task ->
                // Hide ProgressBar and enable the register button
                binding.progressBarRegister.visibility = View.GONE
                binding.btnRegister.isEnabled = true

                if (task.isSuccessful) {
                    // Registration successful
                    Snackbar.make(
                        binding.registerCoordinatorLayout,
                        getString(R.string.registration_success),
                        Snackbar.LENGTH_LONG
                    )
                        .setBackgroundTint(ContextCompat.getColor(this, R.color.success_color))
                        .setTextColor(ContextCompat.getColor(this, R.color.snackbar_text_color))
                        .show()
                    finish()
                } else {
                    // Registration failed with specific error handling
                    try {
                        throw task.exception!!
                    } catch (e: FirebaseAuthUserCollisionException) {
                        // Email already registered
                        Snackbar.make(
                            binding.registerCoordinatorLayout,
                            getString(R.string.email_already_registered),
                            Snackbar.LENGTH_LONG
                        )
                            .setBackgroundTint(ContextCompat.getColor(this, R.color.error_color))
                            .setTextColor(ContextCompat.getColor(this, R.color.snackbar_text_color))
                            .show()
                    } catch (e: FirebaseAuthWeakPasswordException) {
                        // Weak password
                        Snackbar.make(
                            binding.registerCoordinatorLayout,
                            getString(R.string.password_too_weak),
                            Snackbar.LENGTH_LONG
                        )
                            .setBackgroundTint(ContextCompat.getColor(this, R.color.error_color))
                            .setTextColor(ContextCompat.getColor(this, R.color.snackbar_text_color))
                            .show()
                    } catch (e: FirebaseAuthInvalidCredentialsException) {
                        // Invalid email address
                        Snackbar.make(
                            binding.registerCoordinatorLayout,
                            getString(R.string.invalid_email_address),
                            Snackbar.LENGTH_LONG
                        )
                            .setBackgroundTint(ContextCompat.getColor(this, R.color.error_color))
                            .setTextColor(ContextCompat.getColor(this, R.color.snackbar_text_color))
                            .show()
                    } catch (e: Exception) {
                        // Other errors
                        Snackbar.make(
                            binding.registerCoordinatorLayout,
                            getString(R.string.registration_failure) + ": ${e.message}",
                            Snackbar.LENGTH_LONG
                        )
                            .setBackgroundTint(ContextCompat.getColor(this, R.color.error_color))
                            .setTextColor(ContextCompat.getColor(this, R.color.snackbar_text_color))
                            .show()
                    }
                }

            }
    }

    // Function to validate the email format
    private fun isValidEmail(email: String): Boolean {
        return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    // Function to validate the password length
    private fun isValidPassword(password: String): Boolean {
        return password.length >= 6
    }
}
---
app/src/main/java/com/enigma/georocks/ui/activities/ResetPasswordActivity.kt
---
package com.enigma.georocks.ui.activities

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.enigma.georocks.databinding.ActivityResetPasswordBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.android.material.snackbar.Snackbar
import android.widget.Toast
import android.view.MenuItem
import androidx.core.app.NavUtils

class ResetPasswordActivity : AppCompatActivity() {

    private lateinit var binding: ActivityResetPasswordBinding
    private lateinit var auth: FirebaseAuth

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityResetPasswordBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Configure the Toolbar (if present in the layout)
        setSupportActionBar(binding.toolbarResetPassword)
        supportActionBar?.setDisplayHomeAsUpEnabled(true) // Show back button

        auth = FirebaseAuth.getInstance()

        binding.btnSendResetEmail.setOnClickListener {
            val email = binding.etEmailReset.text.toString().trim()
            if (email.isNotEmpty()) {
                if (isValidEmail(email)) {
                    sendResetEmail(email)
                } else {
                    Toast.makeText(this, "Please enter a valid email address", Toast.LENGTH_SHORT).show()
                }
            } else {
                Toast.makeText(this, "Please enter your email address", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // Handle the back button in the Toolbar
        return when (item.itemId) {
            android.R.id.home -> {
                NavUtils.navigateUpFromSameTask(this)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun sendResetEmail(email: String) {
        // Show ProgressBar
        binding.progressBarReset.visibility = android.view.View.VISIBLE
        binding.btnSendResetEmail.isEnabled = false

        auth.sendPasswordResetEmail(email)
            .addOnCompleteListener { task ->
                // Hide ProgressBar
                binding.progressBarReset.visibility = android.view.View.GONE
                binding.btnSendResetEmail.isEnabled = true

                if (task.isSuccessful) {
                    Snackbar.make(binding.resetPasswordCoordinatorLayout, "Reset email sent", Snackbar.LENGTH_LONG).show()
                    finish()
                } else {
                    val errorMessage = task.exception?.message ?: "Error sending reset email"
                    Snackbar.make(binding.resetPasswordCoordinatorLayout, errorMessage, Snackbar.LENGTH_LONG).show()
                }
            }
    }

    private fun isValidEmail(email: String): Boolean {
        return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }
}
---
app/src/main/java/com/enigma/georocks/ui/activities/RockDetailActivity.kt
---
package com.enigma.georocks.ui.activities

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.widget.MediaController
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import com.bumptech.glide.Glide
import com.enigma.georocks.R
import com.enigma.georocks.application.GeoRocksApp
import com.enigma.georocks.data.RockRepository
import com.enigma.georocks.data.remote.model.RockDetailDto
import com.enigma.georocks.databinding.ActivityRockDetailBinding
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions
import com.google.firebase.auth.FirebaseAuth
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RockDetailActivity : AppCompatActivity(), OnMapReadyCallback {

    private lateinit var binding: ActivityRockDetailBinding
    private lateinit var repository: RockRepository
    private lateinit var auth: FirebaseAuth

    private var googleMap: GoogleMap? = null
    private var rockLatitude: Double? = null
    private var rockLongitude: Double? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityRockDetailBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Setup FirebaseAuth
        auth = FirebaseAuth.getInstance()

        // Setup Toolbar
        val toolbar: Toolbar = findViewById(R.id.toolbarRockDetail)
        setSupportActionBar(toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = getString(R.string.rock_details)

        // Get the repository
        repository = (application as GeoRocksApp).repository

        // Retrieve rockId from intent
        val rockId = intent.getStringExtra("ROCK_ID")
        if (rockId == null) {
            Toast.makeText(this, R.string.no_rock_id_provided, Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Load rock details
        loadRockDetails(rockId)

        // Initialize the map
        val mapFragment = supportFragmentManager.findFragmentById(R.id.map_fragment) as? SupportMapFragment
        mapFragment?.getMapAsync(this)
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.menu_rock_detail, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_logout -> {
                logout()
                true
            }
            R.id.action_route -> {
                openRouteInGoogleMaps()
                true
            }
            android.R.id.home -> {
                finish()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun logout() {
        auth.signOut()
        Toast.makeText(this, R.string.logged_out_successfully, Toast.LENGTH_SHORT).show()
        startActivity(Intent(this, LoginActivity::class.java))
        finish()
    }

    private fun loadRockDetails(rockId: String) {
        repository.getRockDetail(rockId).enqueue(object : Callback<RockDetailDto> {
            override fun onResponse(call: Call<RockDetailDto>, response: Response<RockDetailDto>) {
                if (response.isSuccessful) {
                    val rockDetail = response.body()
                    if (rockDetail != null) {
                        updateUIWithDetails(rockDetail)
                    } else {
                        Toast.makeText(
                            this@RockDetailActivity,
                            R.string.rock_details_missing,
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                } else {
                    Toast.makeText(
                        this@RockDetailActivity,
                        R.string.error_loading_details,
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }

            override fun onFailure(call: Call<RockDetailDto>, t: Throwable) {
                Toast.makeText(
                    this@RockDetailActivity,
                    R.string.failed_to_load_details,
                    Toast.LENGTH_SHORT
                ).show()
            }
        })
    }

    private fun updateUIWithDetails(rockDetail: RockDetailDto) {
        // Title & description
        binding.tvRockTitle.text = rockDetail.title ?: getString(R.string.unknown_title)
        binding.tvRockDescription.text = rockDetail.longDesc ?: getString(R.string.no_description_available)

        // Basic properties
        binding.tvRockType.text = getString(
            R.string.type_label,
            rockDetail.aMemberOf ?: getString(R.string.unknown_type)
        )
        binding.tvRockColor.text = getString(
            R.string.color_label,
            rockDetail.color ?: getString(R.string.unknown_color)
        )
        binding.tvRockHardness.text = getString(
            R.string.hardness_label,
            rockDetail.hardness?.toString() ?: getString(R.string.unknown)
        )
        binding.tvRockFormula.text = getString(
            R.string.formula_label,
            rockDetail.formula ?: getString(R.string.unknown)
        )
        binding.tvRockMagnetic.text = getString(
            R.string.magnetic_label,
            rockDetail.magnetic?.toString() ?: getString(R.string.unknown)
        )
        binding.tvRockHealthRisks.text = getString(
            R.string.health_risks_label,
            rockDetail.healthRisks ?: getString(R.string.none)
        )

        // Localities
        val localitiesList = rockDetail.localities
        if (!localitiesList.isNullOrEmpty()) {
            binding.tvRockLocalities.text = getString(
                R.string.localities_label,
                localitiesList.joinToString()
            )
        } else {
            binding.tvRockLocalities.text = getString(
                R.string.localities_label,
                getString(R.string.unknown)
            )
        }

        // Main image
        rockDetail.image?.let { imageUrl ->
            Glide.with(this).load(imageUrl).into(binding.ivRockImage)
        }

        // Additional images (local var to avoid unsafe calls)
        val imagesList = rockDetail.images
        if (!imagesList.isNullOrEmpty()) {
            val additionalImages = imagesList.joinToString("\n")
            binding.tvRockAdditionalImages.text = getString(
                R.string.additional_images_label,
                additionalImages
            )
        } else {
            binding.tvRockAdditionalImages.text = getString(R.string.no_additional_images)
        }

        // Video
        rockDetail.video?.let { videoUrl ->
            val videoUri = Uri.parse(videoUrl)
            binding.vvRockVideo.setVideoURI(videoUri)
            val mediaController = MediaController(this)
            mediaController.setAnchorView(binding.vvRockVideo)
            binding.vvRockVideo.setMediaController(mediaController)
            binding.vvRockVideo.start()
        }

        // Coordinates
        rockLatitude = rockDetail.latitude
        rockLongitude = rockDetail.longitude
        googleMap?.let { updateMapMarker(it) }

        // Physical properties
        val phys = rockDetail.physicalProperties
        if (phys != null) {
            val crystalSystem = phys.ppCrystalSystem ?: getString(R.string.unknown)
            val luster = phys.ppLuster ?: getString(R.string.unknown)
            val streak = phys.ppStreak ?: getString(R.string.unknown)
            val tenacity = phys.ppTenacity ?: getString(R.string.unknown)
            val cleavage = phys.ppCleavage ?: getString(R.string.unknown)
            val fracture = phys.ppFracture ?: getString(R.string.unknown)
            val density = phys.ppDensity ?: getString(R.string.unknown)

            binding.tvRockPhysicalProperties.text = """
                Crystal System: $crystalSystem
                Luster: $luster
                Streak: $streak
                Tenacity: $tenacity
                Cleavage: $cleavage
                Fracture: $fracture
                Density: $density
            """.trimIndent()
        } else {
            binding.tvRockPhysicalProperties.text = getString(R.string.no_physical_properties)
        }

        // Chemical properties
        val chem = rockDetail.chemicalProperties
        if (chem != null) {
            val classification = chem.cpChemicalClassification ?: getString(R.string.unknown)
            val formula = chem.cpFormula ?: getString(R.string.unknown)

            // Use local variable for commonImpurities
            val impuritiesList = chem.cpCommonImpurities
            val commonImpurities = if (!impuritiesList.isNullOrEmpty()) {
                impuritiesList.joinToString()
            } else {
                getString(R.string.unknown)
            }

            binding.tvRockChemicalProperties.text = """
                Classification: $classification
                Formula: $formula
                Common Impurities: $commonImpurities
            """.trimIndent()
        } else {
            binding.tvRockChemicalProperties.text = getString(R.string.no_chemical_properties)
        }

        // FAQs (use local var to avoid unsafe calls)
        val faqsList = rockDetail.frequentlyAskedQuestions
        if (!faqsList.isNullOrEmpty()) {
            val faqsBulleted = faqsList.joinToString(
                separator = "\n• ",
                prefix = "• "
            )
            binding.tvRockFaqs.text = faqsBulleted
        } else {
            binding.tvRockFaqs.text = getString(R.string.no_faqs)
        }
    }

    override fun onMapReady(map: GoogleMap) {
        googleMap = map
        updateMapMarker(map)
    }

    private fun updateMapMarker(map: GoogleMap) {
        if (rockLatitude != null && rockLongitude != null) {
            val location = LatLng(rockLatitude!!, rockLongitude!!)
            map.addMarker(
                MarkerOptions()
                    .position(location)
                    .title(binding.tvRockTitle.text.toString())
            )
            map.moveCamera(CameraUpdateFactory.newLatLngZoom(location, 10f))
        }
    }

    private fun openRouteInGoogleMaps() {
        if (rockLatitude != null && rockLongitude != null) {
            val gmmIntentUri = Uri.parse("google.navigation:q=$rockLatitude,$rockLongitude")
            val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri).apply {
                setPackage("com.google.android.apps.maps")
            }
            if (mapIntent.resolveActivity(packageManager) != null) {
                startActivity(mapIntent)
            } else {
                Toast.makeText(this, R.string.google_maps_not_installed, Toast.LENGTH_SHORT).show()
            }
        } else {
            Toast.makeText(this, R.string.coordinates_missing, Toast.LENGTH_SHORT).show()
        }
    }
}
---
app/src/main/java/com/enigma/georocks/ui/adapters/RocksAdapter.kt
---
package com.enigma.georocks.ui.adapters

import android.content.Intent
import android.media.MediaPlayer
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.enigma.georocks.R
import com.enigma.georocks.data.remote.model.RockDto
import com.enigma.georocks.databinding.RockElementBinding
import com.enigma.georocks.ui.activities.RockDetailActivity

class RocksAdapter(
    private var rocks: List<RockDto>,
    private val loadRockDetails: (String, RocksViewHolder) -> Unit // Callback to load details
) : RecyclerView.Adapter<RocksViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RocksViewHolder {
        val binding = RockElementBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return RocksViewHolder(binding)
    }

    override fun getItemCount(): Int = rocks.size

    override fun onBindViewHolder(holder: RocksViewHolder, position: Int) {
        val rock = rocks[position]

        // Bind the initial rock data
        holder.bind(rock)

        // Load additional details using the rock ID
        rock.id?.let { loadRockDetails(it, holder) }

        // Set the click listener for the whole item
        holder.itemView.setOnClickListener {
            // Play the click sound
            val mediaPlayer = MediaPlayer.create(holder.itemView.context, R.raw.click_sound)
            mediaPlayer.start()
            mediaPlayer.setOnCompletionListener { mp ->
                mp.release()
            }

            // Navigate to RockDetailActivity
            val context = holder.itemView.context
            val intent = Intent(context, RockDetailActivity::class.java).apply {
                putExtra("ROCK_ID", rock.id)
            }
            context.startActivity(intent)
        }
    }

    // Method to update the data in the adapter
    fun updateData(newRocks: List<RockDto>) {
        this.rocks = newRocks
        notifyDataSetChanged()
    }
}
---
app/src/main/java/com/enigma/georocks/ui/adapters/RocksViewHolder.kt
---
package com.enigma.georocks.ui.adapters

import android.util.Log
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.enigma.georocks.R
import com.enigma.georocks.data.remote.model.RockDto
import com.enigma.georocks.databinding.RockElementBinding

class RocksViewHolder(
    private val binding: RockElementBinding
) : RecyclerView.ViewHolder(binding.root) {

    // The context is retrieved from the root view
    private val context = binding.root.context

    fun bind(rock: RockDto) {
        // A log message is recorded to confirm the rock title
        Log.d("RocksViewHolder", "Rock Title: ${rock.title}")

        // The title is assigned, allowing for a fallback if it's empty (though it's non-null)
        binding.tvTitle.text = rock.title.ifBlank {
            context.getString(R.string.unknown_title)
        }

        // A placeholder string resource is used for the type
        binding.tvType.text = context.getString(R.string.loading_type)

        // A placeholder string resource is used for the color
        binding.tvColor.text = context.getString(R.string.loading_color)

        // Glide is used to load the thumbnail into the ImageView
        Glide.with(context)
            .load(rock.thumbnail)
            .into(binding.ivThumbnail)
    }

    fun updateDetails(type: String?, color: String?) {
        // A string resource with a placeholder is used for the "member of" text
        val safeType = type ?: context.getString(R.string.unknown_type)
        binding.tvType.text = context.getString(R.string.member_of_format, safeType)

        // A string resource with a placeholder is used for the color
        val safeColor = color ?: context.getString(R.string.unknown_color)
        binding.tvColor.text = context.getString(R.string.color_format, safeColor)

        // A log message is recorded to confirm that details were updated
        Log.d("RocksViewHolder", "Updated Details - Type: $type, Color: $color")
    }
}
---
app/src/main/java/com/enigma/georocks/ui/fragments/RockDetailFragment.kt
---
package com.enigma.georocks.ui.fragments

import android.net.Uri // Import for handling URIs
import android.os.Bundle
import android.util.Log
import android.widget.MediaController // Import for media controls
import android.widget.Toast
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.enigma.georocks.application.GeoRocksApp
import com.enigma.georocks.data.RockRepository
import com.enigma.georocks.data.remote.model.RockDetailDto
import com.enigma.georocks.databinding.FragmentRockDetailBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RockDetailFragment : Fragment() {

    private var _binding: FragmentRockDetailBinding? = null
    private val binding get() = _binding!!

    private lateinit var repository: RockRepository
    private var rockId: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            rockId = it.getString(ARG_ROCK_ID)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentRockDetailBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        repository = (requireActivity().application as GeoRocksApp).repository

        rockId?.let { id ->
            repository.getRockDetail(id).enqueue(object : Callback<RockDetailDto> {
                override fun onResponse(
                    call: Call<RockDetailDto>,
                    response: Response<RockDetailDto>
                ) {
                    if (response.isSuccessful) {
                        val rockDetail = response.body()
                        if (rockDetail != null) {
                            // Update UI elements with rock details
                            binding.tvTitle.text = rockDetail.title
                            binding.tvLongDesc.text = rockDetail.longDesc
                            // Update other UI elements as needed...

                            // Set up the VideoView
                            if (!rockDetail.video.isNullOrEmpty()) {
                                val videoUri = Uri.parse(rockDetail.video)
                                binding.vvRockVideo.setVideoURI(videoUri)

                                // Add media controls
                                val mediaController = MediaController(requireContext())
                                mediaController.setAnchorView(binding.vvRockVideo)
                                binding.vvRockVideo.setMediaController(mediaController)

                                // Start the video
                                binding.vvRockVideo.start()
                            } else {
                                // Handle the case where there's no video URL
                                Toast.makeText(
                                    requireContext(),
                                    "No video available for this rock",
                                    Toast.LENGTH_SHORT
                                ).show()
                                binding.vvRockVideo.visibility = View.GONE
                            }

                            Log.d("RockDetailFragment", "Rock details: $rockDetail")
                        } else {
                            Toast.makeText(
                                requireContext(),
                                "Rock details are missing",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    } else {
                        Log.e(
                            "RockDetailFragment",
                            "Error fetching rock details: ${response.code()} ${response.message()}"
                        )
                    }
                }

                override fun onFailure(call: Call<RockDetailDto>, t: Throwable) {
                    Toast.makeText(
                        requireContext(),
                        "Error retrieving rock details",
                        Toast.LENGTH_SHORT
                    ).show()
                    Log.e("RockDetailFragment", "Error fetching rock details", t)
                }
            })
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        private const val ARG_ROCK_ID = "rock_id"

        @JvmStatic
        fun newInstance(rockId: String) = RockDetailFragment().apply {
            arguments = Bundle().apply {
                putString(ARG_ROCK_ID, rockId)
            }
        }
    }
}
---
app/src/main/java/com/enigma/georocks/ui/fragments/RocksListFragment.kt
---
package com.enigma.georocks.ui.fragments

import android.content.Intent
import android.os.Bundle
import android.view.*
import android.widget.Toast
import androidx.core.view.MenuHost
import androidx.core.view.MenuProvider
import androidx.fragment.app.Fragment
import androidx.lifecycle.Lifecycle
import androidx.recyclerview.widget.LinearLayoutManager
import com.enigma.georocks.R
import com.enigma.georocks.application.GeoRocksApp
import com.enigma.georocks.data.RockRepository
import com.enigma.georocks.data.remote.model.RockDetailDto
import com.enigma.georocks.data.remote.model.RockDto
import com.enigma.georocks.databinding.FragmentRocksListBinding
import com.enigma.georocks.ui.activities.LoginActivity
import com.enigma.georocks.ui.adapters.RocksAdapter
import com.enigma.georocks.ui.adapters.RocksViewHolder
import com.google.firebase.auth.FirebaseAuth
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RocksListFragment : Fragment() {

    // The view binding variable is declared
    private var _binding: FragmentRocksListBinding? = null
    private val binding get() = _binding!!

    // FirebaseAuth is declared
    private lateinit var auth: FirebaseAuth

    // Repository for data is declared
    private lateinit var repository: RockRepository

    // The full list of rocks is held for search/filtering
    private var fullRocksList: MutableList<RockDto> = mutableListOf()

    // The adapter is declared as a global property
    private lateinit var rocksAdapter: RocksAdapter

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        // The binding is inflated here
        _binding = FragmentRocksListBinding.inflate(inflater, container, false)
        return binding.root
    }

    // The fragment is set up here with data loading and toolbar setup
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // The repository and auth instances are retrieved
        repository = (requireActivity().application as GeoRocksApp).repository
        auth = FirebaseAuth.getInstance()

        // The toolbar is configured
        setupToolbar()

        // The menu is added using MenuProvider instead of the deprecated setHasOptionsMenu
        setupMenu()

        // The list of rocks is requested from the repository
        loadRocks()
    }

    // The toolbar's menu item clicks are managed here
    private fun setupToolbar() {
        binding.toolbarRocksList.setOnMenuItemClickListener { item ->
            when (item.itemId) {
                R.id.action_logout -> {
                    performLogout()
                    true
                }
                else -> false
            }
        }
    }

    // A logout event is handled here
    private fun performLogout() {
        // The signOut() method is called on FirebaseAuth
        auth.signOut()
        Toast.makeText(requireContext(), "Logged out successfully", Toast.LENGTH_SHORT).show()
        // The user is taken to the Login screen, finishing the current activity
        val intent = Intent(requireContext(), LoginActivity::class.java)
        startActivity(intent)
        requireActivity().finish()
    }

    // The menu is set up with a MenuProvider
    private fun setupMenu() {
        // A MenuHost is created from the activity
        val menuHost: MenuHost = requireActivity()

        menuHost.addMenuProvider(object : MenuProvider {
            override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) {
                // The custom menu is inflated
                menuInflater.inflate(R.menu.menu_rocks_list, menu)

                // The SearchView handling is placed here if a search icon is in the menu
                val searchItem = menu.findItem(R.id.action_search)
                val searchView = searchItem.actionView as? android.widget.SearchView
                // The search hint is set
                searchView?.queryHint = getString(R.string.menu_search_hint)
                // The query text listener is set to filter the rocks on text change
                searchView?.setOnQueryTextListener(object : android.widget.SearchView.OnQueryTextListener {
                    override fun onQueryTextSubmit(query: String?): Boolean = false
                    override fun onQueryTextChange(newText: String?): Boolean {
                        filterRocks(newText ?: "")
                        return true
                    }
                })
            }

            override fun onMenuItemSelected(menuItem: MenuItem): Boolean {
                // Additional logic can be placed here if needed
                return false
            }
        }, viewLifecycleOwner, Lifecycle.State.RESUMED)
    }

    // This function calls the repository to fetch all rocks
    private fun loadRocks() {
        // The loading indicator is made visible
        binding.pbLoading.visibility = View.VISIBLE

        val call: Call<MutableList<RockDto>> = repository.getRocksApiary()
        call.enqueue(object : Callback<MutableList<RockDto>> {
            override fun onResponse(call: Call<MutableList<RockDto>>, response: Response<MutableList<RockDto>>) {
                // The loading indicator is hidden
                binding.pbLoading.visibility = View.GONE

                if (response.isSuccessful) {
                    response.body()?.let { rocks ->
                        // The full list of rocks is saved for filtering
                        fullRocksList = rocks
                        // The RecyclerView is set up with the adapter
                        setupRecyclerView(rocks)
                    }
                } else {
                    // A toast is shown for server-side errors
                    Toast.makeText(requireContext(), "Error loading data", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<MutableList<RockDto>>, t: Throwable) {
                // A toast is shown for network/connection issues
                Toast.makeText(requireContext(), "No connection available", Toast.LENGTH_SHORT).show()
                binding.pbLoading.visibility = View.GONE
            }
        })
    }

    // The RecyclerView is set up here
    private fun setupRecyclerView(rocks: List<RockDto>) {
        // A new RocksAdapter instance is assigned with a callback for loading details
        rocksAdapter = RocksAdapter(rocks) { rockId, viewHolder ->
            loadRockDetails(rockId, viewHolder)
        }
        binding.rvRocks.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = rocksAdapter
        }
    }

    // Each rock's additional details are loaded for that ViewHolder
    private fun loadRockDetails(rockId: String, viewHolder: RocksViewHolder) {
        repository.getRockDetail(rockId).enqueue(object : Callback<RockDetailDto> {
            override fun onResponse(call: Call<RockDetailDto>, response: Response<RockDetailDto>) {
                if (response.isSuccessful) {
                    response.body()?.let { detail ->
                        // The additional info is applied to the ViewHolder
                        viewHolder.updateDetails(detail.aMemberOf, detail.color)
                    }
                }
            }

            override fun onFailure(call: Call<RockDetailDto>, t: Throwable) {
                // The failure is logged or displayed
            }
        })
    }

    // This function filters rocks by matching titles with the search query
    private fun filterRocks(query: String) {
        // A filtered list is created from the full list
        val filteredList = fullRocksList.filter { rock ->
            rock.title.contains(query, ignoreCase = true)
        }
        // The RocksAdapter is updated with the filtered list
        rocksAdapter.updateData(filteredList)
    }

    // The binding is cleaned up here
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
---
app/src/main/java/com/enigma/georocks/utils/Constants.kt
---
package com.enigma.georocks.utils

object Constants {
    const val BASE_URL = "https://private-516480-rock9tastic.apiary-mock.com/"
    const val LOGTAG = "APPLOGS"
}
---
app/src/main/java/com/enigma/georocks/application/GeoRocksApp.kt
---
// ===============================================================
// File path: app/src/main/java/com/enigma/georocks/application/GeoRocksApp.kt
// Provide a FavoriteRepository instance
// so that it can be accessed in the rest of the application.
// ===============================================================

package com.enigma.georocks.application

import android.app.Application
import com.enigma.georocks.data.RockRepository
import com.enigma.georocks.data.db.FavoriteDatabase
import com.enigma.georocks.data.db.FavoriteRepository
import com.enigma.georocks.data.remote.RetrofitHelper
import com.google.firebase.FirebaseApp

class GeoRocksApp : Application() {

    // The retrofit instance is lazily created
    private val retrofit by lazy { RetrofitHelper().getRetrofit() }

    // The rock repository is provided
    val repository by lazy { RockRepository(retrofit) }

    // The DB instance is created
    private val favoriteDb by lazy { FavoriteDatabase.getDatabase(this) }

    // The favorite repository is provided
    val favoriteRepository by lazy { FavoriteRepository(favoriteDb.favoriteRockDao()) }

    override fun onCreate() {
        super.onCreate()
        FirebaseApp.initializeApp(this)
        // App initialization is performed here
    }
}

---
app/src/main/res/color/primary.xml
---
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_pressed="true" android:color="#8B4513" /> <!-- Marrón para el estado presionado (tierra) -->
    <item android:state_focused="true" android:color="#D2B48C" /> <!-- Marrón claro para el estado enfocado (arena) -->
    <item android:color="#EAEAE8" /> <!-- Para hacer match con el logo-->
</selector>
---
app/src/main/res/menu/menu_main.xml
---
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_logout"
        android:title="@string/close_session"
        android:orderInCategory="100"
        app:showAsAction="never" />
</menu>
---
app/src/main/res/menu/menu_rock_detail.xml
---
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!-- Option for logging out -->
    <item
        android:id="@+id/action_logout"
        android:title="@string/logout"
        android:orderInCategory="100"
        app:showAsAction="always"
        android:icon="@drawable/ic_logout" />

    <!-- New option to display the route to the rock -->
    <item
        android:id="@+id/action_route"
        android:title="Route to Rock"
        android:orderInCategory="101"
        app:showAsAction="always"
        android:icon="@drawable/ic_directions" />

    <!-- New option to toggle favorite status -->
    <item
        android:id="@+id/action_favorite_rock"
        android:title="Favorite"
        android:orderInCategory="102"
        app:showAsAction="always"
        android:icon="@drawable/ic_favorite_border" />
</menu>

---
app/src/main/res/menu/menu_rocks_list.xml
---
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_logout"
        android:icon="@drawable/ic_logout"
        android:title="@string/logout"
        app:showAsAction="always" />
</menu>
---
mock apiary backend code
---
# Rocks

## Rock List [/rocks/rock_list]

### List All Rocks [GET]

+ Response 200 (application/json)

        [
            {
                "id": "1",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Quartz_monzonite_36mw1037.jpg/1024px-Quartz_monzonite_36mw1037.jpg",
                "title": "Granito Adamellite"
            },{
                "id": "2",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/7/71/Bianco_Sardo_Granit_mit_polierter_Oberfl%C3%A4che.jpg",
                "title": "Potassic Granite"
            },{
                "id": "3",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Granodiorite_fine-grained.jpg/435px-Granodiorite_fine-grained.jpg",
                "title": "Granodiorite"
            },{
                "id": "4",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/6/6e/Alkaline_pegmatite.jpg",
                "title": "Pegmatite"
            },{
                "id": "5",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Aplite_%C5%A1vihov.jpg/1280px-Aplite_%C5%A1vihov.jpg",
                "title": "Aplite"
            },{
                "id": "6",
                "thumbnail": "https://lh3.googleusercontent.com/-Zpbdo1XSQeY/T_MdXK3QqSI/AAAAAAAABck/syFpYDiHZPw/s720/4425%252520greisen.jpg",
                "title": "Greisen"
            },{
                "id": "7",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/c/ca/SKRIFTGRANITT_02_Einerkilen-Evje.jpg",
                "title": "Graphic Granite"
            },{
                "id": "8",
                "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/e/e8/Luxullianite.jpg",
                "title": "Luxullianite"
            },{
                "id": "9",
                "thumbnail": "https://www.minerals.net/thumbnail.aspx?image=MineralImages/schorl-albite-skardu-pakistan.jpg&size=500",
                "title": "Schorl Rock"
            },{
                "id": "10",
                "thumbnail": "https://www.researchgate.net/profile/Tapio-Ruotoistenmaeki/publication/274264107/figure/fig44/AS:667876176457731@1536245497154/Outcrop-5671-X-358-072-Y-222-671-Weathered-altered-granite-Density-is-low-2551.png",
                "title": "Pneumatolyzed Granite"
            }
        ]

## Rock 1 [/rocks/rock_detail/1]

### Get rock detail 1 [GET]

+ Response 200 (application/json)

        {
            "title": "Granito Adamellite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Quartz_monzonite_36mw1037.jpg/1024px-Quartz_monzonite_36mw1037.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
            "long_desc": "A type of intrusive igneous rock with a composition between granite and diorite. It is characterized by its granular texture and the presence of both quartz and feldspar.",
            "a_member_of": "Igneous",
            "also_known_as": ["Adamellite"],
            "formula": "SiO2, Al2O3, K2O, Na2O",
            "hardness": 6,
            "color": "Gray, Pink",
            "magnetic": false,
            "latitude": -25.2744,
            "longitude": 133.7751,
            "health_risks": "None",
            "images": [
                "https://cdn.store-factory.com/www.abijoux.com/content/product_10681723hd.jpg?v=1548944049",
                "https://h7.alamy.com/comp/FEP41Y/adamellite-quartz-monzonite-an-intrusive-felsic-igneous-rock-FEP41Y.jpg"
            ],
            "localities": ["Australia", "Europe"],
            "frequently_asked_questions": [
                "Is Adamellite a type of granite?",
                "What are the uses of Adamellite?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Gray", "Pink"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Irregular",
                "pp_density": "2.65 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O, Na2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium", "Sodium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }


## Rock 2 [/rocks/rock_detail/2]

### Get rock detail 2 [GET]

+ Response 200 (application/json)

        {
            "title": "Potassic Granite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/7/71/Bianco_Sardo_Granit_mit_polierter_Oberfl%C3%A4che.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4",
            "long_desc": "A type of granite rich in potassium feldspar, giving it a distinctive pink or red hue. It is commonly used as a building material and decorative stone.",
            "a_member_of": "Igneous",
            "also_known_as": ["K-feldspar Granite"],
            "formula": "SiO2, Al2O3, K2O",
            "hardness": 6,
            "color": "Red, Pink",
            "magnetic": false,
            "latitude": -14.2350,
            "longitude": -51.9253,

            "health_risks": "None",
            "images": [
                "https://geologyistheway.com/wp-content/uploads/2021/05/l_haga_me7-768x549.jpg",
                "https://geologyistheway.com/wp-content/uploads/2021/05/Dakota_Mahogany_Granite__porphyritic_granite_Milbank_Granite_2.6-2.7_Ga_Neoarchean_east_of_Milbank_South_Dakota_USA_14618866119-768x751.jpg"
            ],
            "localities": ["Brazil", "Canada"],
            "frequently_asked_questions": [
                "Is Potassic Granite durable?",
                "What are the common uses of Potassic Granite?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Red", "Pink"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Conchoidal",
                "pp_density": "2.70 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }

## Rock 3 [/rocks/rock_detail/3]

### Get rock detail 3 [GET]

+ Response 200 (application/json)

        {
            "title": "Granodiorite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/1/1b/Granodiorite_pmg_ss_2006.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
            "long_desc": "A coarse-grained igneous rock similar to granite but containing more plagioclase than potassium feldspar. It is often used as a construction material.",
            "a_member_of": "Igneous",
            "also_known_as": ["Tonalite"],
            "formula": "SiO2, Al2O3, CaO, Na2O",
            "hardness": 6,
            "color": "Gray, White",
            "magnetic": false,
            "latitude": -9.1899,
            "longitude": -75.0152,
            "health_risks": "None",
            "images": [
                "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Granodiorite_fine-grained.jpg/1200px-Granodiorite_fine-grained.jpg",
                "https://www.virtualmicroscope.org/sites/default/files/hero-s339-19.jpg"
            ],
            "localities": ["Peru", "Sweden"],
            "frequently_asked_questions": [
                "What is the difference between Granite and Granodiorite?",
                "What are the common uses of Granodiorite?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Gray", "White"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Irregular",
                "pp_density": "2.75 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, CaO, Na2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Calcium", "Sodium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }

## Rock 4 [/rocks/rock_detail/4]

### Get rock detail 4 [GET]

+ Response 200 (application/json)

        {
            "title": "Pegmatite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/6/6e/Alkaline_pegmatite.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",
            "long_desc": "An igneous rock composed mainly of large crystals. It often contains rare minerals and gemstones, making it a valuable resource for collectors.",
            "a_member_of": "Igneous",
            "also_known_as": ["Coarse-grained Granite"],
            "formula": "SiO2, Al2O3, K2O, Na2O",
            "hardness": 7,
            "color": "White, Pink",
            "magnetic": false,
            "latitude": -18.7669,
            "longitude": 46.8691,
            "health_risks": "None",
            "images": [
                "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/We-pegmatite.jpg/330px-We-pegmatite.jpg",
                "https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Harding_Mine_apatite.jpg/330px-Harding_Mine_apatite.jpg"
            ],
            "localities": ["Madagascar", "United States"],
            "frequently_asked_questions": [
                "What makes Pegmatite unique?",
                "Where is Pegmatite commonly found?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["White", "Pink"],
                "pp_luster": "Vitreous",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 7,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Conchoidal",
                "pp_density": "2.60 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O, Na2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium", "Sodium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }

## Rock 5 [/rocks/rock_detail/5]

### Get rock detail 5 [GET]

+ Response 200 (application/json)

        {
            "title": "Aplite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Aplite_%C5%A1vihov.jpg/1280px-Aplite_%C5%A1vihov.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
            "long_desc": "A fine-grained igneous rock with a sugary texture, often found in small dykes associated with granite formations. It is composed primarily of quartz and feldspar.",
            "a_member_of": "Igneous",
            "also_known_as": ["Sugar Granite"],
            "formula": "SiO2, Al2O3, Na2O",
            "hardness": 6,
            "color": "Light Gray",
            "magnetic": false,
            "latitude": 60.4720,
            "longitude": 8.4689,
            "health_risks": "None",
            "images": [
                "https://upload.wikimedia.org/wikipedia/commons/6/66/Aplite_%C5%A1vihov.jpg",
                "https://www.sandatlas.org/wp-content/uploads/00316-4384-12-cm-granite-aplite.jpg"
            ],
            "localities": ["Norway", "Germany"],
            "frequently_asked_questions": [
                "What are the common uses of Aplite?",
                "Where is Aplite commonly found?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Light Gray"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Irregular",
                "pp_density": "2.60 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, Na2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Sodium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }

## Rock 6 [/rocks/rock_detail/6]

### Get rock detail 6 [GET]

+ Response 200 (application/json)

        {
            "title": "Greisen",
            "image": "https://lh3.googleusercontent.com/-Zpbdo1XSQeY/T_MdXK3QqSI/AAAAAAAABck/syFpYDiHZPw/s720/4425%252520greisen.jpg",
            "video": "https://www.w3schools.com/html/movie.mp4",
            "long_desc": "A light-colored, coarse-grained metamorphic rock composed primarily of quartz and mica. It forms from the alteration of granite and is often associated with tin and tungsten ore deposits.",
            "a_member_of": "Metamorphic",
            "also_known_as": ["Tin Granite"],
            "formula": "SiO2, Al2O3, K2O",
            "hardness": 6,
            "color": "Gray, Green",
            "magnetic": false,
            "latitude": 50.5039,
            "longitude": -4.6521,
            "health_risks": "None",
            "images": [
                "https://www.geologysuperstore.com/wp-content/uploads/2022/10/greisen_1.jpg",
                "https://www.geologysuperstore.com/wp-content/uploads/2023/03/Greisen-1-300x300-1.png"
            ],
            "localities": ["Cornwall, England", "Saxony, Germany"],
            "frequently_asked_questions": [
                "What is Greisen commonly used for?",
                "Is Greisen associated with any metals?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Gray", "Green"],
                "pp_luster": "Pearly",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Uneven",
                "pp_density": "2.75 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium"],
                "cp_common_impurities": ["Fluorine", "Lithium"]
            }
        }

## Rock 7 [/rocks/rock_detail/7]

### Get rock detail 7 [GET]

+ Response 200 (application/json)

        {
            "title": "Graphic Granite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/d/d7/SKRIFTGRANITT_03_Einerkilen-Evje.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
            "long_desc": "A type of granite characterized by its unique texture, where quartz and feldspar are intergrown in a pattern that resembles ancient writing. It is often used as a decorative stone.",
            "a_member_of": "Igneous",
            "also_known_as": ["Graphic Pegmatite"],
            "formula": "SiO2, Al2O3, K2O, Na2O",
            "hardness": 6,
            "color": "Gray, White",
            "magnetic": false,
            "latitude": 59.9139,
            "longitude": 10.7522,
            "health_risks": "None",
            "images": [
                "https://geologybase.com/wp-content/uploads/2022/09/Graphic-granite-texture-runic-granite-runite.jpg"
            ],
            "localities": ["Norway", "Russia"],
            "frequently_asked_questions": [
                "What is the significance of the texture in Graphic Granite?",
                "Is Graphic Granite a common decorative stone?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Gray", "White"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Conchoidal",
                "pp_density": "2.70 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O, Na2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium", "Sodium"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }


## Rock 8 [/rocks/rock_detail/8]

### Get rock detail 8 [GET]

+ Response 200 (application/json)

        {
            "title": "Luxullianite",
            "image": "https://upload.wikimedia.org/wikipedia/commons/e/e8/Luxullianite.jpg",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4",
            "long_desc": "A rare variety of granite containing abundant tourmaline, giving it a distinctive speckled appearance. It is named after the village of Luxulyan in Cornwall, England.",
            "a_member_of": "Igneous",
            "also_known_as": ["Tourmaline Granite"],
            "formula": "SiO2, Al2O3, B2O3",
            "hardness": 6,
            "color": "Pink, Black",
            "magnetic": false,
            "latitude": 50.3922,
            "longitude": -4.7482,
            "health_risks": "None",
            "images": [
                "https://www.virtualmicroscope.org/sites/default/files/11AGT03-Img11891_hero_pd.jpg",
                "https://www.virtualmicroscope.org/sites/default/files/11AGT02a-Img9095_hero_pd.jpg"
            ],
            "localities": ["Cornwall, England"],
            "frequently_asked_questions": [
                "Why is Luxullianite rare?",
                "Where can Luxullianite be found?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Pink", "Black"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Irregular",
                "pp_density": "2.75 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, B2O3",
                "cp_elements_listed": ["Silicon", "Aluminum", "Boron"],
                "cp_common_impurities": ["Iron", "Magnesium"]
            }
        }

## Rock 9 [/rocks/rock_detail/9]

### Get rock detail 9 [GET]

+ Response 200 (application/json)

        {
            "title": "Schorl Rock",
            "image": "https://www.minerals.net/thumbnail.aspx?image=MineralImages/schorl-albite-skardu-pakistan.jpg&size=500",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/VolkswagenGTIReview.mp4",
            "long_desc": "A metamorphic rock primarily composed of black tourmaline (schorl) and quartz. It is named after the German village of Schorl, where it was first discovered.",
            "a_member_of": "Metamorphic",
            "also_known_as": ["Tourmaline Schist"],
            "formula": "NaFe3Al6(BO3)3Si6O18(OH)4",
            "hardness": 7,
            "color": "Black",
            "magnetic": false,
            "latitude": -14.2350,
            "longitude": -51.9253,
            "health_risks": "None",
            "images": [
                "https://celestialearthminerals.com/wp-content/uploads/2013/05/MIXN9-286.jpg",
                "https://assets3.fossilera.com/sp/494104/schorl-black-tourmaline/tourmaline-var-schorl-mica.jpg"
            ],
            "localities": ["Germany", "Brazil"],
            "frequently_asked_questions": [
                "What is Schorl Rock used for?",
                "Is Schorl Rock common in jewelry?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["Black"],
                "pp_luster": "Vitreous",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 7,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Conchoidal",
                "pp_density": "3.20 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Borate Silicate",
                "cp_formula": "NaFe3Al6(BO3)3Si6O18(OH)4",
                "cp_elements_listed": ["Sodium", "Iron", "Aluminum", "Boron"],
                "cp_common_impurities": ["Magnesium", "Titanium"]
            }
        }

## Rock 10 [/rocks/rock_detail/10]

### Get rock detail 10 [GET]

+ Response 200 (application/json)

        {
            "title": "Pneumatolyzed Granite",
            "image": "https://www.researchgate.net/profile/Tapio-Ruotoistenmaeki/publication/274264107/figure/fig44/AS:667876176457731@1536245497154/Outcrop-5671-X-358-072-Y-222-671-Weathered-altered-granite-Density-is-low-2551.png",
            "video": "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4",
            "long_desc": "A type of altered granite that has been affected by gaseous emanations during its formation, resulting in unique mineral compositions and textures.",
            "a_member_of": "Igneous",
            "also_known_as": ["Altered Granite"],
            "formula": "SiO2, Al2O3, K2O",
            "hardness": 6,
            "color": "White, Gray",
            "magnetic": false,
            "latitude": 60.4720,
            "longitude": 8.4689,
            "health_risks": "None",
            "images": [
                "https://www.virtualmicroscope.org/sites/default/files/hero-11agt25.jpg",
                "http://www.jsjgeology.net/Yerington-Batholith-altered-granite_files/image002.gif"
            ],
            "localities": ["Norway", "Finland"],
            "frequently_asked_questions": [
                "What causes the alteration in Pneumatolyzed Granite?",
                "Is Pneumatolyzed Granite used in construction?"
            ],
            "physical_properties": {
                "pp_crystal_system": "Granular",
                "pp_colors": ["White", "Gray"],
                "pp_luster": "Dull",
                "pp_diaphaneity": "Opaque",
                "pp_magnetic": false,
                "pp_streak": "White",
                "pp_hardness": 6,
                "pp_tenacity": "Brittle",
                "pp_cleavage": "None",
                "pp_fracture": "Irregular",
                "pp_density": "2.65 g/cm³"
            },
            "chemical_properties": {
                "cp_chemical_classification": "Silicate",
                "cp_formula": "SiO2, Al2O3, K2O",
                "cp_elements_listed": ["Silicon", "Aluminum", "Potassium"],
                "cp_common_impurities": ["Iron", "Fluorine"]
            }
        }
---
app/src/main/res/layout/activity_login.xml
---
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/scrollView"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    android:background="@color/primary">

    <LinearLayout
        android:id="@+id/ll_login_container"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="24dp">

        <ImageView
            android:id="@+id/iv_logo"
            android:layout_width="150dp"
            android:layout_height="150dp"
            android:layout_gravity="center_horizontal"
            android:src="@drawable/logo"
            android:background="@color/contrast_background"
            android:contentDescription="@string/app_logo"
            android:layout_marginBottom="32dp" />

        <EditText
            android:id="@+id/et_email"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/email_hint"
            android:inputType="textEmailAddress"
            android:padding="12dp"
            android:drawableStart="@drawable/ic_email"
            android:drawablePadding="8dp"
            android:background="@drawable/edit_text_background"
            android:textColor="@color/rocky_text_color"
            android:layout_marginBottom="16dp" />

        <EditText
            android:id="@+id/et_password"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/password_hint"
            android:inputType="textPassword"
            android:padding="12dp"
            android:drawableStart="@drawable/ic_password"
            android:drawablePadding="8dp"
            android:background="@drawable/edit_text_background"
            android:textColor="@color/rocky_text_color"
            android:layout_marginBottom="24dp" />

        <Button
            android:id="@+id/btn_login"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/login_button"
            android:backgroundTint="@color/rockyAppbarEnd"
            android:textColor="@color/high_contrast_white"
            android:padding="12dp"
            android:layout_marginBottom="16dp" />

        <Button
            android:id="@+id/btn_google_sign_in"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/google_sign_in_button"
            android:backgroundTint="@color/google_blue"
            android:textColor="@color/high_contrast_white"
            android:padding="12dp"
            android:drawableStart="@drawable/ic_google"
            android:drawablePadding="8dp"
            android:layout_marginBottom="24dp" />

        <TextView
            android:id="@+id/tv_register"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/register_prompt"
            android:textColor="@color/rocky_text_color"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal"
            android:layout_marginBottom="16dp" />

        <TextView
            android:id="@+id/tvForgotPassword"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/forgot_password"
            android:textColor="@color/rocky_text_color"
            android:layout_marginBottom="16dp"
            android:layout_gravity="center_horizontal"
            android:textStyle="italic"
            android:clickable="true"
            android:focusable="true"
            android:padding="16dp" />
    </LinearLayout>
</ScrollView>
---
activity_main.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.MainActivity">

    <FrameLayout
        android:id="@+id/fragment_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
---
activity_register.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/register_coordinator_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- AppBar with Toolbar -->
    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/rockyAppbarStart">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar_register"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:title="@string/register_title"
            android:titleTextColor="@color/high_contrast_text"
            app:popupTheme="@style/ThemeOverlay.MaterialComponents.Light" />
    </com.google.android.material.appbar.AppBarLayout>

    <!-- Main Content -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        android:fillViewport="true"
        android:background="@color/rockyGradientStart">

        <LinearLayout
            android:id="@+id/register_container"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="24dp"
            android:gravity="center_horizontal">

            <!-- Title -->
            <TextView
                android:id="@+id/tv_register_title"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/register"
                android:textSize="26sp"
                android:textStyle="bold"
                android:textAlignment="center"
                android:textColor="@color/rocky_text_color"
                android:layout_marginBottom="20dp" />

            <!-- Email Input -->
            <com.google.android.material.card.MaterialCardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="12dp"
                app:cardCornerRadius="12dp"
                app:cardElevation="2dp">

                <EditText
                    android:id="@+id/et_email_register"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="@string/email_hint"
                    android:inputType="textEmailAddress"
                    android:padding="16dp"
                    android:drawableStart="@drawable/ic_email"
                    android:drawablePadding="12dp"
                    android:background="@null"
                    android:textColor="@color/rocky_text_color" />
            </com.google.android.material.card.MaterialCardView>

            <!-- Password Input -->
            <com.google.android.material.card.MaterialCardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="12dp"
                app:cardCornerRadius="12dp"
                app:cardElevation="2dp">

                <EditText
                    android:id="@+id/et_password_register"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="@string/password_hint"
                    android:inputType="textPassword"
                    android:padding="16dp"
                    android:drawableStart="@drawable/ic_password"
                    android:drawablePadding="12dp"
                    android:background="@null"
                    android:textColor="@color/rocky_text_color" />
            </com.google.android.material.card.MaterialCardView>

            <!-- Register Button -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btn_register"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/register_button"
                android:backgroundTint="@color/rockyAppbarEnd"
                android:textColor="@color/high_contrast_white"
                android:padding="16dp"
                android:textSize="18sp"
                android:layout_marginBottom="12dp"
                app:cornerRadius="8dp" />

            <!-- ProgressBar -->
            <ProgressBar
                android:id="@+id/progress_bar_register"
                android:layout_width="48dp"
                android:layout_height="48dp"
                android:indeterminate="true"
                android:visibility="gone"
                android:layout_gravity="center" />
        </LinearLayout>
    </ScrollView>
</androidx.coordinatorlayout.widget.CoordinatorLayout>
---
activity_reset_password.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/reset_password_coordinator_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- AppBar with Toolbar -->
    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/rockyAppbarStart">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar_reset_password"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:title="@string/reset_password"
            android:titleTextColor="@color/high_contrast_white"
            app:popupTheme="@style/ThemeOverlay.MaterialComponents.Light" />
    </com.google.android.material.appbar.AppBarLayout>


    <!-- Main Content -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        android:fillViewport="true"
        android:background="@color/contrast_background">

        <LinearLayout
            android:id="@+id/reset_password_container"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="24dp"
            android:gravity="center_horizontal">

            <!-- Title -->
            <TextView
                android:id="@+id/tv_reset_password_title"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/reset_password"
                android:textSize="24sp"
                android:textStyle="bold"
                android:textColor="@color/high_contrast_text"
                android:layout_marginBottom="24dp" />

            <!-- Email Input Field -->
            <com.google.android.material.card.MaterialCardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardElevation="4dp">

                <EditText
                    android:id="@+id/et_email_reset"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="@string/email_hint"
                    android:inputType="textEmailAddress"
                    android:padding="12dp"
                    android:drawableStart="@drawable/ic_email"
                    android:drawablePadding="8dp"
                    android:background="@null"
                    android:textColor="@color/high_contrast_text" />
            </com.google.android.material.card.MaterialCardView>

            <!-- Send Reset Email Button -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btn_send_reset_email"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/send_reset_email"
                android:backgroundTint="@color/rockyAppbarEnd"
                android:textColor="@color/high_contrast_white"
                android:padding="16dp"
                android:layout_marginBottom="16dp"
                app:cornerRadius="8dp" />

            <!-- ProgressBar -->
            <ProgressBar
                android:id="@+id/progress_bar_reset"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:visibility="gone" />

        </LinearLayout>

    </ScrollView>

</androidx.coordinatorlayout.widget.CoordinatorLayout>

---
activity_rock_detail.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/coordinatorLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.activities.RockDetailActivity">

    <!-- AppBar with Toolbar -->
    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbarRockDetail"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:title="@string/rock_details"
            app:popupTheme="@style/ThemeOverlay.MaterialComponents.Light" />
    </com.google.android.material.appbar.AppBarLayout>

    <!-- ScrollView for all content -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:id="@+id/llContainer"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <!-- Main Image in a Card -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <ImageView
                    android:id="@+id/ivRockImage"
                    android:layout_width="match_parent"
                    android:layout_height="200dp"
                    android:scaleType="centerCrop"
                    android:contentDescription="@string/rock_image"/>
            </androidx.cardview.widget.CardView>

            <!-- Video in a Card -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <VideoView
                    android:id="@+id/vvRockVideo"
                    android:layout_width="match_parent"
                    android:layout_height="200dp"
                    android:layout_margin="8dp"/>
            </androidx.cardview.widget.CardView>

            <!-- Card for Title & Description -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockTitle"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textSize="20sp"
                        android:textStyle="bold"
                        android:layout_marginBottom="8dp"/>

                    <TextView
                        android:id="@+id/tvRockDescription"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textSize="14sp"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for Basic Properties -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockType"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockColor"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockHardness"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockFormula"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockMagnetic"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockHealthRisks"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/tvRockLocalities"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for Additional Images -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockAdditionalImages"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for Physical Properties -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockPhysicalProperties"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for Chemical Properties -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockChemicalProperties"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for FAQs -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/tvRockFaqs"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"/>
                </LinearLayout>
            </androidx.cardview.widget.CardView>

            <!-- Card for Map -->
            <androidx.cardview.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:cardCornerRadius="8dp"
                app:cardUseCompatPadding="true"
                android:background="@android:color/white">

                <fragment
                    android:id="@+id/map_fragment"
                    android:name="com.google.android.gms.maps.SupportMapFragment"
                    android:layout_width="match_parent"
                    android:layout_height="200dp"/>
            </androidx.cardview.widget.CardView>
        </LinearLayout>
    </ScrollView>
</androidx.coordinatorlayout.widget.CoordinatorLayout>

---
activity_splash.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/primary"
    tools:context=".ui.SplashActivity">

    <ImageView
        android:id="@+id/logoImageView"
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:src="@drawable/logo"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />
</androidx.constraintlayout.widget.ConstraintLayout>
---
fragment_rock_detail.xml
---
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#141A31"
    tools:context=".ui.fragments.RockDetailFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <RelativeLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <ScrollView
                android:id="@+id/scrollView"
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:id="@+id/tvTitle"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:fontFamily="@font/ubuntu_bold"
                        android:gravity="center_horizontal"
                        android:paddingBottom="10dp"
                        android:textColor="@color/white"
                        android:textSize="25sp"
                        tools:text="Rock Title" />

                    <com.makeramen.roundedimageview.RoundedImageView
                        android:id="@+id/ivImage"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="20dp"
                        app:riv_corner_radius="10dp"
                        tools:src="@mipmap/ic_launcher" />

                    <TextView
                        android:id="@+id/tvLongDesc"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:fontFamily="@font/ubuntu"
                        android:paddingLeft="15dp"
                        android:paddingTop="15dp"
                        android:paddingRight="15dp"
                        android:paddingBottom="10dp"
                        android:textColor="@color/white"
                        android:textSize="20sp"
                        tools:text="Rock Description" />

                    <TextView
                        android:id="@+id/tvType"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:fontFamily="@font/ubuntu"
                        android:paddingLeft="15dp"
                        android:paddingTop="15dp"
                        android:textColor="@color/white"
                        android:textSize="18sp"
                        tools:text="Type: Igneous" />

                    <TextView
                        android:id="@+id/tvColor"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:fontFamily="@font/ubuntu"
                        android:paddingLeft="15dp"
                        android:paddingTop="15dp"
                        android:textColor="@color/white"
                        android:textSize="18sp"
                        tools:text="Color: Light Gray" />

                </LinearLayout>

                <!-- VideoView -->
                <VideoView
                    android:id="@+id/vvRockVideo"
                    android:layout_width="match_parent"
                    android:layout_height="200dp"
                    android:layout_marginTop="16dp" />

            </ScrollView>

            <ProgressBar
                android:id="@+id/pbLoading"
                android:layout_width="50dp"
                android:layout_height="50dp"
                android:layout_centerInParent="true" />

        </RelativeLayout>

    </androidx.constraintlayout.widget.ConstraintLayout>

</FrameLayout>
---
fragment_rocks_list.xml
---
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.activities.RockDetailActivity">

    <!-- AppBar with a gradient background -->
    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@drawable/gradient_appbar">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbarRocksList"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:title="@string/app_name"
            android:titleTextColor="@android:color/white"
            app:menu="@menu/menu_rocks_list"
            app:popupTheme="@style/ThemeOverlay.MaterialComponents.Light" />
    </com.google.android.material.appbar.AppBarLayout>

    <!-- Main content under the AppBar -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        android:fillViewport="true"
        android:padding="0dp"> <!-- Removed extra padding so the card can fill more space -->

        <!-- A CardView that fills most of the screen -->
        <androidx.cardview.widget.CardView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_margin="8dp"
            android:foreground="?attr/selectableItemBackground"
            android:elevation="3dp"
            app:cardCornerRadius="8dp"
            app:cardUseCompatPadding="true"
            app:cardPreventCornerOverlap="true"
            android:background="@drawable/gradient_box"
            tools:ignore="NestedScrollView">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <!-- ProgressBar for loading -->
            <ProgressBar
                android:id="@+id/pbLoading"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                android:visibility="gone"
                android:layout_marginBottom="8dp" />

            <!-- RecyclerView for Rocks -->
            <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/rvRocks"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:clipToPadding="false"
                android:scrollbars="none" />

        </LinearLayout>
    </androidx.cardview.widget.CardView>
</ScrollView>

    </androidx.coordinatorlayout.widget.CoordinatorLayout>
---
rock_element.xml
---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cardRockItem"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    android:foreground="?attr/selectableItemBackground"
    android:clickable="true"
    android:focusable="true"
    app:cardUseCompatPadding="true"
    app:cardCornerRadius="12dp"
    app:cardPreventCornerOverlap="true"
    android:background="@drawable/gradient_box"
    android:elevation="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="8dp">

        <com.makeramen.roundedimageview.RoundedImageView
            android:id="@+id/ivThumbnail"
            android:layout_width="70dp"
            android:layout_height="70dp"
            android:layout_marginEnd="8dp"
            android:scaleType="centerCrop"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:riv_corner_radius="8dp" />

        <TextView
            android:id="@+id/tvTitle"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:fontFamily="@font/ubuntu_bold"
            android:textColor="@android:color/black"
            android:textSize="18sp"
            android:layout_marginBottom="4dp"
            app:layout_constraintStart_toEndOf="@id/ivThumbnail"
            app:layout_constraintTop_toTopOf="@id/ivThumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0"
            tools:text="Rock Name" />

        <TextView
            android:id="@+id/tvType"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:fontFamily="@font/ubuntu"
            android:textColor="#444444"
            android:textSize="14sp"
            app:layout_constraintTop_toBottomOf="@id/tvTitle"
            app:layout_constraintStart_toStartOf="@id/tvTitle"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="A member of: Igneous" />

        <TextView
            android:id="@+id/tvColor"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:fontFamily="@font/ubuntu"
            android:textColor="#666666"
            android:textSize="14sp"
            android:layout_marginTop="2dp"
            app:layout_constraintTop_toBottomOf="@id/tvType"
            app:layout_constraintStart_toStartOf="@id/tvTitle"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Color: Gray, Pink" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
---
values/colors.xml
---
<resources>
    <!-- Primary colors -->
    <color name="primary_color">#6200ee</color>
    <color name="primary_dark_color">#3700b3</color>
    <color name="google_blue">#4285f4</color>

    <!-- High contrast colors -->
    <color name="high_contrast_white">#ffffff</color>
    <color name="high_contrast_text">#000000</color>

    <!-- Other colors -->
    <color name="white">#FFFFFF</color>
    <color name="secondary_text_color">#757575</color>

    <color name="rockyAppbarStart">#4A4A48</color>
    <color name="rockyAppbarEnd">#6D6D6A</color>

    <color name="rockyStartColor">#F5F5F5</color>
    <color name="rockyEndColor">#D7D7D7</color>

    <!-- A more earthy or grayish text color -->
    <color name="rocky_text_color">#4E4E4E</color>

    <!-- For the gradient background in the CardViews -->
    <color name="rockyGradientStart">#E6E6E6</color>
    <color name="rockyGradientEnd">#CBCBCB</color>

    <!-- For example, your contrast background might be a lighter gray or beige -->
    <color name="contrast_background">#F9F9F8</color>

    <color name="success_color">#4CAF50</color> <!-- Verde para éxito -->
    <color name="error_color">#F44336</color> <!-- Rojo para errores -->
    <color name="snackbar_text_color">#FFFFFF</color> <!-- Blanco para texto en Snackbar -->

</resources>
---
values/strings/strings.xml
---
<resources>
    <!-- General Strings -->
    <string name="app_name">GeoRocks</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="a_member_of_igneous">A member of: Igneous</string>
    <string name="color_gray_pink">Color: Gray, Pink</string>
    <string name="rock_image">Rock Image</string>
    <string name="rock_title">Rock Title</string>
    <string name="type">Type</string>
    <string name="color">Color</string>
    <string name="no_chemical_properties">No chemical properties available</string>
    <string name="none">None</string>
    <string name="hardness">Hardness</string>
    <string name="google_maps_key">AIzaSyCODaSvoOUXoW5J1VUt0nBUiXL_PPUKnl4</string>
    <string name="formula">Formula</string>
    <string name="magnetic">Magnetic</string>
    <string name="localities">Localities</string>
    <string name="frequently_asked_questions">Frequently Asked Questions</string>

    <!-- Labels with placeholders -->
    <string name="type_label">Type: %1$s</string>
    <string name="unknown_type">Unknown Type</string>
    <string name="color_label">Color: %1$s</string>
    <string name="unknown_color">Unknown Color</string>
    <string name="hardness_label">Hardness: %1$s</string>
    <string name="formula_label">Formula: %1$s</string>
    <string name="magnetic_label">Magnetic: %1$s</string>
    <string name="localities_label">Localities: %1$s</string>
    <string name="health_risks_label">Health Risks: %1$s</string> <!-- Placeholder added -->
    <string name="additional_images_label">Additional Images:\n%1$s</string> <!-- Placeholder added -->

    <!-- Fallback / Misc -->
    <string name="unknown">Unknown</string>
    <string name="rock_details_missing">Rock details missing</string>
    <string name="error_loading_details">Error loading rock details</string>
    <string name="failed_to_load_details">Failed to load rock details</string>
    <string name="app_logo">App Logo</string>
    <string name="no_faqs">No FAQs available.</string>
    <string name="no_description_available">No Description Available</string>
    <string name="no_additional_images">No Additional Images</string>
    <string name="no_physical_properties">No physical properties available.</string>

    <!-- Toolbar / General -->
    <string name="rock_details">Rock Details</string>
    <string name="logout">Log Out</string>

    <!-- Messages used in the Activity -->
    <string name="no_rock_id_provided">No rock ID provided.</string>
    <string name="logged_out_successfully">Logged out successfully.</string>
    <string name="google_maps_not_installed">Google Maps app is not installed.</string>
    <string name="coordinates_missing">Coordinates are missing for this rock.</string>

    <!-- Login Activity -->
    <string name="email_hint">Enter your email</string>
    <string name="password_hint">Enter your password</string>
    <string name="login_button">Login</string>
    <string name="register_prompt">Register</string>
    <string name="google_sign_in_button">Sign in with Google</string>
    <string name="close_session">Close session</string>
    <string name="forgot_password">Forgot password?</string>
    <string name="Email">Email</string>

    <!-- Reset Password Activity -->
    <string name="reset_password">Reset Password</string>
    <string name="send_email">Send Email</string>
    <string name="send_reset_email">Send Reset Email</string>

    <!-- Register Activity -->
    <string name="register">Register</string>
    <string name="register_title">Register User</string>
    <string name="register_button">Register</string>

    <!-- Registration Messages -->
    <string name="registration_success">Registration successful</string>
    <string name="registration_failure">Error registering user</string>
    <string name="password_too_short">Password must be at least 6 characters</string>
    <string name="invalid_email">Please enter a valid email address</string>
    <string name="complete_all_fields">Please complete all fields</string>
    <string name="email_already_registered">This email is already registered.</string>
    <string name="password_too_weak">The password is too weak.</string>
    <string name="invalid_email_address">Invalid email address.</string>

    <!-- Main Menu -->
    <string name="action_register">Register</string>

    <!-- Additional Feedback Messages -->
    <string name="rock_details_loaded">Rock details loaded successfully</string>
    <string name="login_success">Login successful</string>
    <string name="login_failure">Authentication failed</string>
    <string name="no_faq_found">No FAQs found.</string>
    <string name="menu_search">Menu Search.</string>
    <string name="menu_search_hint">Search a Rock</string>

    <string name="unknown_title">Name Unknown</string>
    <string name="loading_type">Loading type…</string>
    <string name="loading_color">Loading color…</string>

    <string name="member_of_format">A member of: %1$s</string>
    <string name="color_format">Color: %1$s</string>


</resources>
---
values/themes/themes.xml
---
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.GeoRocks" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Example rocky colors: #7B7D7D (dark gray) and #B2BEB5 (lighter grayish). -->
        <!-- Change these as you wish. -->

        <!-- Primary (main brand color) -->
        <item name="colorPrimary">#7B7D7D</item>
        <item name="colorOnPrimary">#FFFFFF</item>

        <!-- Secondary (accents, highlights) -->
        <item name="colorSecondary">#B2BEB5</item>
        <item name="colorOnSecondary">#000000</item>

        <!-- Optional: define more colors to fully leverage Material 3 -->
        <item name="colorSurface">#F5F5F5</item>
        <item name="colorOnSurface">#000000</item>

        <item name="colorOnBackground">#000000</item>
        <item name="colorError">#B3261E</item>
        <item name="colorOnError">#FFFFFF</item>

        <!-- You can also define typography, shape, etc., if needed. -->
        <!-- e.g., <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Material3.SmallComponent</item> -->
    </style>

    <!-- Inherit from Base.Theme.GeoRocks so that we don't repeat ourselves. -->
    <style name="Theme.GeoRocks" parent="Base.Theme.GeoRocks"/>
</resources>
---
app/src/main/java/com/enigma/georocks/data/db/FavoriteRockEntity.kt
---
// ===============================================================
// File path: app/src/main/java/com/enigma/georocks/data/db/FavoriteRockEntity.kt
// This entity is created to store minimal information about a favorited rock.
//
// It is recommended to add columns as needed if more info is to be shown offline.
//
// Comments are written in passive voice for debugging convenience.
// ===============================================================

package com.enigma.georocks.data.db

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "favorite_rocks")
// This entity class is declared for Room to store favorites locally
data class FavoriteRockEntity(
    @PrimaryKey
    // This field is used for storing the unique rock ID
    val rockId: String,
    // This field is used for storing the rock's title
    val title: String?,
    // This field is used for storing the rock's thumbnail
    val thumbnail: String?
)
---
app/src/main/java/com/enigma/georocks/data/db/FavoriteRockDao.kt
---
// ===============================================================
// File path: app/src/main/java/com/enigma/georocks/data/db/FavoriteRockDao.kt
// The DAO is declared to handle basic operations on the "favorite_rocks" table.
// ===============================================================

package com.enigma.georocks.data.db

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Delete

@Dao
// This DAO interface is provided for Room to manage favorite rocks CRUD
interface FavoriteRockDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    // This function is used to insert a new favorite rock or update it if it already exists
    fun insertFavorite(rock: FavoriteRockEntity)

    @Delete
    // This function is used to remove a favorite rock from the table
    fun deleteFavorite(rock: FavoriteRockEntity)

    @Query("SELECT * FROM favorite_rocks WHERE rockId = :rockId LIMIT 1")
    // This query is used to check if a specific rock is in favorites
    fun getFavoriteById(rockId: String): FavoriteRockEntity?

    @Query("SELECT * FROM favorite_rocks")
    // This query is used to retrieve all favorited rocks
    fun getAllFavorites(): List<FavoriteRockEntity>
}
---
app/src/main/java/com/enigma/georocks/data/db/FavoriteDatabase.kt
---
// ===============================================================
// File path: app/src/main/java/com/enigma/georocks/data/db/FavoriteDatabase.kt
// The Room database class is declared here. It includes the FavoriteRockDao.
// ===============================================================

package com.enigma.georocks.data.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

// The version number is incremented each time the schema is changed
@Database(entities = [FavoriteRockEntity::class], version = 1, exportSchema = false)
// This abstract class is declared for Room to generate the database
abstract class FavoriteDatabase : RoomDatabase() {

    // A reference to the DAO is provided
    abstract fun favoriteRockDao(): FavoriteRockDao

    companion object {
        @Volatile
        private var INSTANCE: FavoriteDatabase? = null

        // A singleton pattern is used to retrieve the database instance
        fun getDatabase(context: Context): FavoriteDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    FavoriteDatabase::class.java,
                    "favorite_rocks_db"
                )
                    .fallbackToDestructiveMigration()
                    .build()
                INSTANCE = instance
                instance
            }
        }
    }
}
---
app/src/main/java/com/enigma/georocks/data/db/FavoriteRepository.kt
---
// ===============================================================
// File path: app/src/main/java/com/enigma/georocks/data/db/FavoriteRepository.kt
// A simple repository is implemented to interact with the DAO.
// ===============================================================

package com.enigma.georocks.data.db

import com.enigma.georocks.data.remote.model.RockDto

// This class is used to manage DB operations for favorite rocks
class FavoriteRepository(private val dao: FavoriteRockDao) {

    // This function is used to convert a RockDto to a FavoriteRockEntity and insert it
    fun addToFavorites(rock: RockDto) {
        val entity = FavoriteRockEntity(
            rockId = rock.id,
            title = rock.title,
            thumbnail = rock.thumbnail
        )
        dao.insertFavorite(entity)
    }

    // This function is used to remove a rock from favorites
    fun removeFromFavorites(rock: RockDto) {
        val entity = FavoriteRockEntity(
            rockId = rock.id,
            title = rock.title,
            thumbnail = rock.thumbnail
        )
        dao.deleteFavorite(entity)
    }

    // This function is used to check if a rock is already in the favorites
    fun isRockFavorited(rockId: String): Boolean {
        val item = dao.getFavoriteById(rockId)
        return (item != null)
    }

    // This function is used to retrieve the full list of favorites
    fun getAllFavorites(): List<FavoriteRockEntity> {
        return dao.getAllFavorites()
    }
}
---
build.gradle.kts
---
import java.util.Properties
import java.io.FileInputStream

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.google.services)
    id("kotlin-kapt") // The kapt plugin is applied here
}

android {
    namespace = "com.enigma.georocks"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.enigma.georocks"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        // The MAPS_API_KEY is read from local.properties
        val localProperties = Properties()
        val localPropertiesFile = rootProject.file("local.properties")
        if (localPropertiesFile.exists()) {
            localProperties.load(FileInputStream(localPropertiesFile))
        }
        val mapsApiKey = localProperties.getProperty("MAPS_API_KEY") ?: ""
        resValue("string", "google_maps_key", mapsApiKey)

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // Minification is disabled for the release build type
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        // Java 17 compatibility is configured
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        // The JVM target is set to 17 for Kotlin
        jvmTarget = "17"
    }

    buildFeatures {
        // View binding is enabled
        viewBinding = true
    }
}

dependencies {
    // Core Android dependencies
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.activity)
    implementation(libs.androidx.constraintlayout)

    // Retrofit and Gson are used for networking and JSON conversion
    implementation(libs.retrofit)
    implementation(libs.converter.gson)

    // Logging interceptor for HTTP requests
    implementation(libs.logging.interceptor)

    // Glide and Picasso are used for image loading
    implementation(libs.glide.v4151)
    implementation(libs.picasso)

    // Room database dependencies
    implementation(libs.androidx.room.runtime)
    kapt(libs.androidx.room.compiler) // Annotation processing with kapt for Room
    implementation(libs.androidx.room.ktx)

    // Lifecycle-aware components
    implementation(libs.androidx.lifecycle.runtime.ktx)

    // Rounded image views
    implementation(libs.roundedimageview)

    // Google Maps API
    implementation(libs.play.services.maps)

    // Firebase Authentication
    implementation(platform(libs.firebase.bom.v3223)) // Firebase BOM is used
    implementation(libs.firebase.auth.ktx)
    implementation(libs.firebase.common.ktx)

    // Testing libraries
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core.v351)
}


